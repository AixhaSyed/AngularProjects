const Now = require('../lib')

module.exports = class Teams extends Now {
  create({ slug }) {return __async(function*(){
    return this.retry((bail, attempt) => __async(function*(){
      if (this._debug) {
        console.time(`> [debug] #${attempt} POST /teams}`)
      }

      const res = yield this._fetch(`/teams`, {
        method: 'POST',
        body: {
          slug
        }
      })

      if (this._debug) {
        console.timeEnd(`> [debug] #${attempt} POST /teams`)
      }

      if (res.status === 403) {
        return bail(new Error('Unauthorized'))
      }

      const body = yield res.json()

      if (res.status === 400) {
        const e = new Error(body.error.message)
        e.code = body.error.code
        return bail(e)
      } else if (res.status !== 200) {
        const e = new Error(body.error.message)
        e.code = body.error.code
        throw e
      }

      return body
    }.call(this)))
  }.call(this))}

  edit({ id, slug, name }) {return __async(function*(){
    return this.retry((bail, attempt) => __async(function*(){
      if (this._debug) {
        console.time(`> [debug] #${attempt} PATCH /teams/${id}}`)
      }

      const payload = {}
      if (name) {
        payload.name = name
      }
      if (slug) {
        payload.slug = slug
      }

      const res = yield this._fetch(`/teams/${id}`, {
        method: 'PATCH',
        body: payload
      })

      if (this._debug) {
        console.timeEnd(`> [debug] #${attempt} PATCH /teams/${id}`)
      }

      if (res.status === 403) {
        return bail(new Error('Unauthorized'))
      }

      const body = yield res.json()

      if (res.status === 400) {
        const e = new Error(body.error.message)
        e.code = body.error.code
        return bail(e)
      } else if (res.status !== 200) {
        const e = new Error(body.error.message)
        e.code = body.error.code
        throw e
      }

      return body
    }.call(this)))
  }.call(this))}

  inviteUser({ teamId, email }) {return __async(function*(){
    return this.retry((bail, attempt) => __async(function*(){
      if (this._debug) {
        console.time(`> [debug] #${attempt} POST /teams/${teamId}/members}`)
      }
      const res = yield this._fetch(`/teams/${teamId}/members`, {
        method: 'POST',
        body: {
          email
        }
      })

      if (this._debug) {
        console.timeEnd(`> [debug] #${attempt} POST /teams/${teamId}/members}`)
      }

      if (res.status === 403) {
        return bail(new Error('Unauthorized'))
      }

      const body = yield res.json()

      if (res.status === 400) {
        const e = new Error(body.error.message)
        e.code = body.error.code
        return bail(e)
      } else if (res.status !== 200) {
        const e = new Error(body.error.message)
        e.code = body.error.code
        throw e
      }

      return body
    }.call(this)))
  }.call(this))}

  ls() {return __async(function*(){
    return this.retry((bail, attempt) => __async(function*(){
      if (this._debug) {
        console.time(`> [debug] #${attempt} GET /teams}`)
      }

      const res = yield this._fetch(`/teams`)

      if (this._debug) {
        console.timeEnd(`> [debug] #${attempt} GET /teams`)
      }

      if (res.status === 403) {
        return bail(new Error('Unauthorized'))
      }

      return res.json()
    }.call(this)))
  }.call(this))}
}

function __async(g){return new Promise(function(s,j){function c(a,x){try{var r=g[x?"throw":"next"](a)}catch(e){j(e);return}r.done?s(r.value):Promise.resolve(r.value).then(c,d)}function d(e){c(e,1)}c()})}
