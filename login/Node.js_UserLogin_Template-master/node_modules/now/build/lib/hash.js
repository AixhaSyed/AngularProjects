// Native
const { createHash } = require('crypto')
const path = require('path')

// Packages
const { readFile } = require('fs-promise')

/**
  * Computes hashes for the contents of each file given.
  *
  * @param {Array} of {String} full paths
  * @return {Map}
  */

function hashes(files, isStatic, pkg) {return __async(function*(){
  const map = new Map()

  yield Promise.all(
    files.map(name => __async(function*(){
      const filename = path.basename(name)
      let data

      if (isStatic && filename === 'package.json') {
        const packageString = JSON.stringify(pkg, null, 2)
        data = Buffer.from(packageString)
      } else {
        data = yield readFile(name)
      }

      const h = hash(data)
      const entry = map.get(h)
      if (entry) {
        entry.names.push(name)
      } else {
        map.set(hash(data), { names: [name], data })
      }
    }()))
  )
  return map
}())}

/**
 * Computes a hash for the given buf.
 *
 * @param {Buffer} file data
 * @return {String} hex digest
 */

function hash(buf) {
  return createHash('sha1').update(buf).digest('hex')
}

module.exports = hashes

function __async(g){return new Promise(function(s,j){function c(a,x){try{var r=g[x?"throw":"next"](a)}catch(e){j(e);return}r.done?s(r.value):Promise.resolve(r.value).then(c,d)}function d(e){c(e,1)}c()})}
